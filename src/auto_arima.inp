function void y_has_zero_values (bundle *self)
/* Check whether y includes only zero values.
    return: 0 if not zero or negative values, otherwise 1. */

    series y = self.y
    smpl y --no-missing

    if self.verbose > 0 && (sum(y == 0) > 0) ? TRUE : FALSE
        printWarning(sprintf("Endogenous '%s' includes only zero values", self.name_endo))
        self.error = TRUE
    endif

end function


function bundle set_bundle (const series y,
                            bundle opts[null])
    /* Compile self bundle by merging eventual information
    from opts-bundle. */

    if !exists(opts)
        bundle opts = null
    endif

    bundle self = default_values(y)
    self = opts + self			# override defaults
    self.name_endo = argname(y)

    return self
end function





function bundle default_values (const series y)
    /* Set default values */

    bundle self = null
    scalar self.error = FALSE
    scalar self.y_is_always_zero = FALSE
    scalar self.intercept = TRUE
    scalar self.seasonal = data_has_seasonality()
    scalar self.verbose = 1
    list self.xlist = null

    strings self.methods_supported  = defarray("exact_ml", "conditional_ml")
    string self.estimation_method = "exact_ml"

    # arima parameters
    scalar self.max_d = 2
    scalar self.max_p = 5
    scalar self.max_q = 5

    # seasonal arima parameters
    if self.seasonal
        scalar self.start_D = 0		# TODO: makes sense?
        scalar self.start_P = 1
        scalar self.start_Q = 1
        scalar self.max_D = 1
        scalar self.max_P = 2
        scalar self.max_Q = 2
    endif

    # TODO: check for what these are
    #    scalar self.stationary = FALSE
    #    scalar self.stepwise = TRUE
    #    scalar self.nmodels = 94,
    #  trace = FALSE,
    #  approximation = (length(x) > 150 | frequency(x) > 12),
    #  method = NULL,
    #  truncate = NULL,
    #  test = c("kpss", "adf", "pp"),
    #  test.args = list(),
    #  seasonal.test = c("seas", "ocsb", "hegy", "ch"),
    #  seasonal.test.args = list(),
    #  allowdrift = TRUE,
    #  allowmean = TRUE,
    #  lambda = NULL,
    #  biasadj = FALSE,
    #  parallel = FALSE,
    #  num.cores = 2,

    return self
end function



function bundle auto_arima (const series y "Endogenous",
                            const int min_p[0::1] "AR order",
                            const int min_d[0::0] "Differencing order",
                            const int min_q[0::1] "MA order",
                            const list xlist[null] "Exogenous",
                            bundle opts[null] "Bundle incl. optional parameters")
    /* Main package function */

    if !exists(opts)
        bundle opts = null
    endif
    bundle self = set_bundle(y, opts)

    series self.y = y
    list self.xlist = xlist
    scalar self.min_p = min_p
    scalar self.min_d = min_d
    scalar self.min_q = min_q

    do_initial_checks(&self)
    if self.error
        return self
    endif

    prepare_arima_option_string(&config)



    return self
end function


scalar self.max_D = 1
scalar self.max_P = 2
scalar self.max_Q = 2



function void arima_d_parameters (matrix *parameters, const bundle self)
    /* */

    ** HIER WEITERMACHEN 

    loop d_loop = self.min_d..self.max_d -q

    endloop

end function


function matrix arima_parameter_combinations (const bundle self)
/* Compile matrix for each parameter combination (rows) holding
   the distinct parameter values (columns).
    return: matrix holding all combinations. */


    # TODO think about a clever structure avoiding 6 inner loops
    matrix parameters = NA * zeros(1,6)

    scalar combination = 1
    loop p_loop = self.min_p..self.max_p -q

        parameters[combination, 1] = $p_loop

        loop d_loop = self.min_d..self.max_d -q

            loop q_loop = self.min_q..self.max_q -q



            endloop


        endloop

    endloop

end function


function void prepare_arima_option_string (bundle *self)
    /* */

    string self.arima_option_string = ""
    if self.verbose == 0
        self.arima_option_string += "--quiet "
    elif self.verbose == 2
        self.arima_option_string += "--verbose "
    endif

    if self.intercept == FALSE
        self.arima_option_string += "--nc "
    endif

    if self.estimation_method == "conditional_ml"
        self.arima_option_string += "--conditional "
    endif

    # TODO: many more options may be added -- see 'help arima'
end function


function void drop_intercept_from_xlist (bundle *self)
    /* Drop intercept from xlist if it should not enter the model. */

    if inlist(self.xlist, "const") && self.intercept == FALSE
        if self.verbose == 1
            printInfo("Intercept dropped as you set intercept == FALSE")
        endif
        self.xlist -= const
    endif
end function


function void add_intercept_to_xlist (bundle *self)
    /* Add intercept to xlist if it should enter the model. */

    if !inlist(self.xlist, "const") && self.intercept == TRUE
        if self.verbose == 1
            printInfo("Intercept added to xlist as you set intercept == TRUE")
        endif
        self.xlist += const
    endif
end function


function void do_initial_checks (bundle *self)
    /* Helper function perfoming some initial checks */

    y_has_zero_values(&self)
    drop_intercept_from_xlist(&self)

end function

# TODO: test
function scalar estimation_method_supported (const bundle self)
    /* */


    self.estimation_method = tolower(self.estimation_method)
    if instrings(self.methods_supported, self.estimation_method)
        return 1
    else
        printWarning(sprintf("Estimation method '%s' not supported.",\
          self.estimation_method))
        printInfo(sprintf("Will switch to %s method.", self.methods_supported[1]))
        self.estimation_method = self.methods_supported[1]
        return 0
    endif
end function



function scalar data_has_seasonality (void)
    /* Flag seasonality of data set */

    return ($pd > 1) ? 1 : 0
end function





function void printInfo (const string s)
    printf "\nInfo: %s\n", s
end function

function void printWarning (const string s)
    printf "\nWarning: %s\n", s
end function

function void printError (const string s)
    printf "\nError: %s\n", s
end function






