Fit best SARIMA(X) model to univariate time series.

Returns best SARIMAX model according to either AIC, AICc, BIC or HQC value. The function conducts a (brute force) search over possible model within the order constraints provided.


This is an alternative package to the existing gretl armax package written by Yi-Nung Yang which has some limitations, e.g. it does only work for ARMA type models.

The features of the auto_arima package are:
- Consideration of seasonal ARIMA models with and without exogenous regressors.
- Simple API.
- GUI access through the gretl menu.
- Public convenience functions for the user for summarizing results, or retrieving the gretl ARIMA command of the 'best' model.
- Source code is tested by means of unit-tests to minimize bugs.

Please ask questions and report bugs on the gretl mailing list if possible. Alternatively, create an issue ticket on the github repo (see below).
Source code and test script(s) can be found here:
https://github.com/atecon/auto_arima



PUBLIC FUNCTIONS:
-----------------------------------------------------------------------
Function:       auto_arima(const series y, const list xlist[null],
                bundle opts[null])
Arguments:
y:              series, Endogenous variable
xlist:          list, List of exogenous variables (optional)
opts:           bundle, Bundle for passing SARIMA parameters and further
                options (see below for details)

Return:
Bundle comprising the various items.
-----------------------------------------------------------------------

-----------------------------------------------------------------------
Function:       print_auto_arima_results(const bundle model)

Arguments:
model:          bundle, Bundle returned by auto_arima() function

Return:
No return value. Print summary results for each parameter combination and
information criteria estimated in tabular form.
-----------------------------------------------------------------------

-----------------------------------------------------------------------
Function:       get_auto_arima_parameters (const bundle model, const string
                info_criteria, const int model_rank[1::])

Arguments:
model:          bundle, Bundle returned by auto_arima() function
info_criteria:  string, Name of information criteria (either "aicc", "aic",
                "bic" or "hqc") for which to return SARIMA parameter vector
model_rank:     int, Compute the SARIMA parameter vector for the n-th
                best model in terms of the chosen information criteria.

Return:
Vector of SARIMA parameters of the n-th best model in terms of the chosen information criteria.
-----------------------------------------------------------------------

-----------------------------------------------------------------------
Function:       get_auto_arima_command (const bundle model, const string
                info_criteria, const int model_rank[1::])

Arguments:
model:          bundle, Bundle returned by auto_arima() function
info_criteria:  string, Name of information criteria (either "aicc", "aic",
                "bic" or "hqc") for which to return SARIMA parameter vector
model_rank:     int, Consider the n-th best model in terms of the chosen
                information criteria.

Return:
String holding the gretl/ hansl command for estimating the selected model.
-----------------------------------------------------------------------

-----------------------------------------------------------------------
Function:       auto_arima_gui()

Arguments:

Return:
A wrapper for the GUI. Prints summary results and returns a bundle with model results.
-----------------------------------------------------------------------



The optional 'opts' bundle:
----------------------------
The user can pass an optional bundle as the 3rd argument to the
auto_arima() function. Currently, the following options are supported:

* verbose:           bool, print details if 1, otherwise no print out
                     (default 1).
* with_intercept:    bool, if 1 (or TRUE) an intercept is added to the
                     model, of 0 (or FALSE) no intercept is added (default 1).
* with_seasonality:  bool, if 1 (or TRUE) seasonal ARIMA parameters
                     combinations are considered (if the data frequency
                     has seasonality), otherwise seasonal ARIMA parameters
                     are not considered (default 1).
* estimation_method: string, if "conditional_ml" use conditional maximum
                     likelihood
* min_p, max_p, min_d, max_d, min_q, max_q, min_P, max_P, min_D, max_D, min_Q, max_Q:               Model parameters (see below for explanations)



Default SARIMA parameter values:
--------------------------------
* min_p          :  scalar, minimum autoregressive order (default 0)
* max_p          :  scalar, maximum autoregressive order (default 4)
* min_d          :  scalar, minimum order of 1-st differencing (default 0)
* max_d          :  scalar, maximum order of 1-st differencing (default 1)
* min_q          :  scalar, minimum moving-average order (default 0)
* max_q          :  scalar, maximum moving-average order (default 4)
* min_P          :  scalar, minimum seasonal moving-average order (default 0)
* max_P          :  scalar, maximum seasonal moving-average order (default 1)
* min_D          :  scalar, minimum order of seasonal-differencing (default 0)
* max_D          :  scalar, maximum order of seasonal-differencing (default 1)
* min_Q          :  scalar, minimum seasonal moving-average order (default 0)
* max_Q          :  scalar, maximum seasonal moving-average order (default 1)



Changelog:
- v0.51, July 2020:
    + Fix bug when executing get_auto_arima_command() function: Names of endogenous series and exogenous list where not correct in every case.
    + GUI access: Boolean parameter "seasonality" dropped: It is automatically checked now whether the active data set has seasonal frequency.
    + Minor formatting improvements.

- v0.5, July 2020:
	+ initial release
