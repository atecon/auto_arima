set verbose off
clear

include assertion.gfn

include "./src/auto_arima.inp" --force


function void test_n_lags (void)
    print "Start testing n_lags()"

    assert_equal_num(n_lags(0, 0), 1)
    assert_equal_num(n_lags(0, 1), 2)
    catch assert_false(n_lags(1, 0))
end function
test_n_lags()


function void test_arima_parameter_matrix (void)
    print "Start testing arima_parameter_matrix()."

    bundle B
    scalar B.min_p = 0
    scalar B.max_p = 2
    scalar B.min_d = 0
    scalar B.max_d = 0
    scalar B.min_q = 0
    scalar B.max_q = 0

    matrix params_actual =   {0, 0, 0; \
                              1, 0, 0; \
                              2, 0, 0}

    matrix m = arima_parameter_matrix(B)
    matrix d = m - params_actual
    assert_equal_num(sum(d), 0)


    bundle B = null
    scalar B.min_p = 0
    scalar B.max_p = 1
    scalar B.min_d = 0
    scalar B.max_d = 1
    scalar B.min_q = 0
    scalar B.max_q = 2

    matrix params_actual =   {0, 0, 0; \
                              0, 0, 1; \
                              0, 0, 2; \
                              0, 1, 0; \
                              0, 1, 1; \
                              0, 1, 2; \
                              1, 0, 0; \
                              1, 0, 1; \
                              1, 0, 2; \
                              1, 1, 0; \
                              1, 1, 1; \
                              1, 1, 2 }

    matrix m = arima_parameter_matrix(B)
    matrix d = m - params_actual
    assert_equal_num(sum(d), 0)

end function
test_arima_parameter_matrix()


function void test_sarima_parameter_matrix (void)
    print "Start testing sarima_parameter_matrix()."

    bundle B
    scalar B.min_p = 0
    scalar B.max_p = 2
    scalar B.min_d = 0
    scalar B.max_d = 0
    scalar B.min_q = 0
    scalar B.max_q = 0
    scalar B.min_P = 0
    scalar B.max_P = 0
    scalar B.min_D = 0
    scalar B.max_D = 0
    scalar B.min_Q = 0
    scalar B.max_Q = 0


    matrix params_actual =   {0, 0, 0, 0, 0, 0; \
                              1, 0, 0, 0, 0, 0; \
                              2, 0, 0, 0, 0, 0}

    matrix m = sarima_parameter_matrix(B)
    matrix d = m - params_actual
    assert_equal_num(sum(d), 0)


    bundle B = null
    scalar B.min_p = 0
    scalar B.max_p = 1
    scalar B.min_d = 0
    scalar B.max_d = 0
    scalar B.min_q = 0
    scalar B.max_q = 0
    scalar B.min_P = 0
    scalar B.max_P = 0
    scalar B.min_D = 0
    scalar B.max_D = 0
    scalar B.min_Q = 1
    scalar B.max_Q = 2


    matrix params_actual =   {0, 0, 0, 0, 0, 1; \
                              0, 0, 0, 0, 0, 2; \
                              1, 0, 0, 0, 0, 1; \
                              1, 0, 0, 0, 0, 2}

    matrix m = sarima_parameter_matrix(B)
    matrix d = m - params_actual
    assert_equal_num(sum(d), 0)


    # Test whether a complex matrix will be constructed - no output testing though
    bundle B = null
    scalar B.min_p = 1
    scalar B.max_p = 2
    scalar B.min_d = 0
    scalar B.max_d = 1
    scalar B.min_q = 1
    scalar B.max_q = 1
    scalar B.min_P = 1
    scalar B.max_P = 3
    scalar B.min_D = 1
    scalar B.max_D = 2
    scalar B.min_Q = 1
    scalar B.max_Q = 2

    matrix m = sarima_parameter_matrix(B)
end function
test_sarima_parameter_matrix()


















































printf "\nInfo: All tests passed.\n"
