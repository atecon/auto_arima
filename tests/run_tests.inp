set verbose off
clear

include assertion.gfn

include "./src/auto_arima.inp" --force


open denmark.gdt -q -p
function void test_default_values (const series y)
    print "Start testing default_values()"
    print "Start testing seasonal ARIMA parameter"

    bundle B = default_values(y)

    assert_equal_num(B.min_d, 0)
    assert_equal_num(B.max_d, 1)
    assert_equal_num(B.min_p, 0)
    assert_equal_num(B.max_p, 4)
    assert_equal_num(B.min_q, 0)
    assert_equal_num(B.max_q, 4)

    assert_equal_num(B.min_D, 0)
    assert_equal_num(B.max_D, 1)
    assert_equal_num(B.min_P, 0)
    assert_equal_num(B.max_P, 1)
    assert_equal_num(B.min_Q, 0)
    assert_equal_num(B.max_Q, 1)

    assert_true(B.with_seasonality)
end function
test_default_values(LRM)

open nile.gdt -q -p
function void test_default_values (const series y)
    print "Start testing default_values()"
    print "Start testing non-seasonal ARIMA parameter"

    bundle B = default_values(y)

    assert_equal_num(B.min_d, 0)
    assert_equal_num(B.max_d, 1)
    assert_equal_num(B.min_p, 0)
    assert_equal_num(B.max_p, 4)
    assert_equal_num(B.min_q, 0)
    assert_equal_num(B.max_q, 4)

    assert_equal_num(B.min_D, 0)
    assert_equal_num(B.max_D, 0)
    assert_equal_num(B.min_P, 0)
    assert_equal_num(B.max_P, 0)
    assert_equal_num(B.min_Q, 0)
    assert_equal_num(B.max_Q, 0)

    assert_false(B.with_seasonality)
end function
test_default_values(nile)


open nile.gdt -q -p
function void test_y_is_constant (const series y)
    print "Start testing y_is_constant()"

    bundle B = null
    series B.y = y
    scalar B.verbose = TRUE
    scalar B.error = FALSE
    string B.name_yseries = "nile"

    y_is_constant(&B)
    assert_false(B.error)

    series c = 1
    series B.y = c
    string B.name_yseries = "c"
    y_is_constant(&B)
    assert_true(B.error)
end function
test_y_is_constant(nile)



open nile.gdt -q -p
function void test_drop_intercept_from_xlist (const series y)
    print "Start testing drop_intercept_from_xlist()"

    bundle B = null
    series B.y = y
    scalar B.verbose = TRUE
    scalar B.with_intercept = TRUE
    list B.xlist = null

    # empty xlist + intercept = TRUE
    drop_intercept_from_xlist(&B)
    list xlist = B.xlist
    assert_false(inlist(xlist, "const"))

    # empty xlist + intercept = FALSE
    scalar B.with_intercept = FALSE
    drop_intercept_from_xlist(&B)
    list xlist = B.xlist
    assert_false(inlist(xlist, "const"))

    # xlist + intercept = TRUE
    series x = normal()
    list B.xlist = x
    scalar B.with_intercept = TRUE
    drop_intercept_from_xlist(&B)
    list xlist = B.xlist
    assert_false(inlist(xlist, "const"))

    # xlist + intercept = FALSE
    series x = normal()
    list B.xlist = x
    scalar B.with_intercept = FALSE
    drop_intercept_from_xlist(&B)
    list xlist = B.xlist
    assert_false(inlist(xlist, "const"))

    # const + intercept = FALSE
    series const = 1
    list B.xlist = const
    scalar B.with_intercept = FALSE
    drop_intercept_from_xlist(&B)
    list xlist = B.xlist
    assert_false(inlist(xlist, "const"))

    # const + intercept = TRUE
    series const = 1
    list B.xlist = const
    scalar B.with_intercept = TRUE
    drop_intercept_from_xlist(&B)
    list xlist = B.xlist
    assert_true(inlist(xlist, "const"))
end function
test_drop_intercept_from_xlist(nile)


function void test_prepare_arima_options (void)
    print "Start testing prepare_arima_options_string()"

    bundle B = null
    scalar B.with_intercept = TRUE
    string B.estimation_method = ""
    prepare_arima_options_string(&B)
    assert_equal_str(B.arima_model_options_string, "")

    bundle B = null
    scalar B.with_intercept = FALSE
    string B.estimation_method = ""
    prepare_arima_options_string(&B)
    assert_equal_str(strstrip(B.arima_model_options_string), "--nc")

    bundle B = null
    scalar B.with_intercept = FALSE
    string B.estimation_method = "conditional_ml"
    prepare_arima_options_string(&B)
    assert_equal_str(strstrip(B.arima_model_options_string),\
        "--nc --conditional")

end function
test_prepare_arima_options()


open nile.gdt -q -p
function void test_get_parameter_names (const series y)
    print "Start testing get_parameter_names()"
    print "Non-seasonal case"

    strings S = get_parameter_names()

    assert_true(instrings(S, "p")[1])
    assert_true(instrings(S, "q")[1])
    assert_true(instrings(S, "d")[1])

    assert_false(nelem(instrings(S, "P")))
    assert_false(nelem(instrings(S, "Q")))
    assert_false(nelem(instrings(S, "D")))
end function
test_get_parameter_names(nile)


open denmark.gdt -q -p
function void test_get_parameter_names (const series y)
    print "Start testing get_parameter_names()"
    print "Seasonal case"

    strings S = get_parameter_names()

    assert_true(instrings(S, "p")[1])
    assert_true(instrings(S, "q")[1])
    assert_true(instrings(S, "d")[1])

    assert_true(instrings(S, "P")[1])
    assert_true(instrings(S, "Q")[1])
    assert_true(instrings(S, "D")[1])

end function
test_get_parameter_names(LRM)


open nile.gdt -q -p
function void test_add_n_combinations (const series y)
    print "Start testing n_combinations()"
    print "Non-seasonal case"

    bundle B = default_values(y)
    add_n_combinations(&B)
    assert_equal_num(B.n_combinations, 50)
end function
test_add_n_combinations(nile)


open denmark.gdt -q -p
function void test_add_n_combinations (const series y)
    print "Start testing n_combinations()"
    print "Seasonal case"

    bundle B = default_values(y)
    add_n_combinations(&B)
    assert_equal_num(B.n_combinations, 400)
end function
test_add_n_combinations(LRM)


function void test_n_lags (void)
    print "Start testing n_lags()"

    assert_equal_num(n_lags(0, 0), 1)
    assert_equal_num(n_lags(0, 1), 2)
    catch assert_false(n_lags(1, 0))
end function
test_n_lags()


function void test_get_info_criteria_names (void)
    print "Start testing get_info_criteria_names()"

    strings S = get_info_criteria_names()

    assert_equal_num(nelem(S), 4)

    assert_true(instrings(S, "aicc"))
    assert_true(instrings(S, "aic"))
    assert_true(instrings(S, "bic"))
    assert_true(instrings(S, "hqc"))
end function
test_get_info_criteria_names()


function void test_sarima_parameter_matrix (void)
    print "Start testing sarima_parameter_matrix()."

    bundle B
    scalar B.min_p = 0
    scalar B.max_p = 2
    scalar B.min_d = 0
    scalar B.max_d = 0
    scalar B.min_q = 0
    scalar B.max_q = 0
    scalar B.min_P = 0
    scalar B.max_P = 0
    scalar B.min_D = 0
    scalar B.max_D = 0
    scalar B.min_Q = 0
    scalar B.max_Q = 0


    matrix params_actual =   {0, 0, 0, 0, 0, 0; \
                              1, 0, 0, 0, 0, 0; \
                              2, 0, 0, 0, 0, 0}

    matrix m = sarima_parameter_matrix(B)
    matrix d = m - params_actual
    assert_equal_num(sum(d), 0)


    bundle B = null
    scalar B.min_p = 0
    scalar B.max_p = 1
    scalar B.min_d = 0
    scalar B.max_d = 0
    scalar B.min_q = 0
    scalar B.max_q = 0
    scalar B.min_P = 0
    scalar B.max_P = 0
    scalar B.min_D = 0
    scalar B.max_D = 0
    scalar B.min_Q = 1
    scalar B.max_Q = 2


    matrix params_actual =   {0, 0, 0, 0, 0, 1; \
                              0, 0, 0, 0, 0, 2; \
                              1, 0, 0, 0, 0, 1; \
                              1, 0, 0, 0, 0, 2}

    matrix m = sarima_parameter_matrix(B)
    matrix d = m - params_actual
    assert_equal_num(sum(d), 0)


    # Test whether a complex matrix will be constructed - no output testing though
    bundle B = null
    scalar B.min_p = 1
    scalar B.max_p = 2
    scalar B.min_d = 0
    scalar B.max_d = 1
    scalar B.min_q = 1
    scalar B.max_q = 1
    scalar B.min_P = 1
    scalar B.max_P = 3
    scalar B.min_D = 1
    scalar B.max_D = 2
    scalar B.min_Q = 1
    scalar B.max_Q = 2

    matrix m = sarima_parameter_matrix(B)
end function
test_sarima_parameter_matrix()


# non-seasonal anual data set
open hendry_jae.gdt -q -p
function void test_arima_parameter_matrix (void)
    /* For non-seasonal data, the arima parameter combination matrix
    is actually compiled using the get_parameter matrix() function. */
    print "Start testing arima_parameter_matrix()."

    bundle B
    scalar B.min_p = 0
    scalar B.max_p = 2
    scalar B.min_d = 0
    scalar B.max_d = 0
    scalar B.min_q = 0
    scalar B.max_q = 0
    # set_default_values() sets the seasonal parameters to 0
    scalar B.min_P = 0
    scalar B.max_P = 0
    scalar B.min_D = 0
    scalar B.max_D = 0
    scalar B.min_Q = 0
    scalar B.max_Q = 0

    matrix params_actual =   {0, 0, 0; \
                              1, 0, 0; \
                              2, 0, 0}

    # retrieve the arima parameter matrix for non-seasonal data
    matrix m = get_parameter_matrix(B)
    matrix d = m - params_actual
    assert_equal_num(sum(d), 0)


    bundle B = null
    scalar B.min_p = 0
    scalar B.max_p = 1
    scalar B.min_d = 0
    scalar B.max_d = 1
    scalar B.min_q = 0
    scalar B.max_q = 2
    # set_default_values() sets the seasonal parameters to 0
    scalar B.min_P = 0
    scalar B.max_P = 0
    scalar B.min_D = 0
    scalar B.max_D = 0
    scalar B.min_Q = 0
    scalar B.max_Q = 0

    matrix params_actual =   {0, 0, 0; \
                              0, 0, 1; \
                              0, 0, 2; \
                              0, 1, 0; \
                              0, 1, 1; \
                              0, 1, 2; \
                              1, 0, 0; \
                              1, 0, 1; \
                              1, 0, 2; \
                              1, 1, 0; \
                              1, 1, 1; \
                              1, 1, 2 }

    matrix m = get_parameter_matrix(B)
    matrix d = m - params_actual
    assert_equal_num(sum(d), 0)

end function
test_arima_parameter_matrix()


function void test_final_model_options_string (void)
    print "Start testing final_model_options_string()"

    bundle B = null
    scalar B.verbose = 0
    string B.arima_model_options_string = "some_string"
    string r = final_model_options_string(B)
    assert_equal_str(strstrip(r), "some_string")

    bundle B = null
    scalar B.verbose = 1
    string B.arima_model_options_string = "some_string"
    string r = final_model_options_string(B)
    assert_equal_str(strstrip(r), "--quiet")

    bundle B = null
    scalar B.verbose = 2
    string B.arima_model_options_string = "some_string"
    string r = final_model_options_string(B)
    assert_equal_str(strstrip(r), "--verbose")
end function
test_final_model_options_string()


function void test_estimate_models (void)
    print "Start testing estimate_models()"

    strings S = get_info_criteria_names()

    assert_equal_num(nelem(S), 4)

    assert_true(instrings(S, "aicc"))
    assert_true(instrings(S, "aic"))
    assert_true(instrings(S, "bic"))
    assert_true(instrings(S, "hqc"))
end function
test_estimate_models()


open nile.gdt -p -q
function void test_get_parameters (const series y)
    print "Start testing get_parameters()"
    print "Non-seasonal data"

    scalar p, d, q

    matrix m = {1, 2, 3}

    get_parameters(m, &p, &d, &q)

    assert_equal_num(p, 1)
    assert_equal_num(d, 2)
    assert_equal_num(q, 3)
end function
test_get_parameters(nile)


open denmark.gdt -p -q
function void test_get_parameters (const series y)
    print "Start testing get_parameters()"
    print "Seasonal data"

    scalar p, d, q, P, D, Q

    matrix m = {1, 2, 3, 4, 5, 6}

    get_parameters(m, &p, &d, &q, &P, &D, &Q)

    assert_equal_num(p, 1)
    assert_equal_num(d, 2)
    assert_equal_num(q, 3)
    assert_equal_num(P, 4)
    assert_equal_num(D, 5)
    assert_equal_num(Q, 6)
end function
test_get_parameters(LRM)

function void test_asterisks (void)
    print "Start testing asterisks()"

    string s1 = asterisks(1)
    string s2 = asterisks(2)
    string s3 = asterisks(3)

    assert_equal_str(s1, "***")
    assert_equal_str(s2, "**")
    assert_equal_str(s3, "*")
end function
test_asterisks()


open denmark.gdt -p -q
list L = LRY IDE
function void test_add_data_to_bundle (const series y,
                                        const list L)
    print "Start testing add_data_to_bundle()"

    bundle B = null
    scalar B.with_intercept = FALSE
    scalar B.verbose = TRUE
    add_data_to_bundle(&B, y)

    assert_equal_str(B.name_yseries, "y")
    assert_equal_str(B.name_xlist, "")
    assert_equal_num(nobs(B.y), 55)
    assert_false(nelem(B.xlist))

    bundle B = null
    scalar B.with_intercept = TRUE
    scalar B.verbose = TRUE
    add_data_to_bundle(&B, y)

    assert_equal_str(B.name_yseries, "y")
    assert_equal_str(B.name_xlist, "")
    assert_equal_num(nobs(B.y), 55)
    assert_equal_num(nelem(B.xlist), 1)


    bundle B = null
    scalar B.with_intercept = TRUE
    scalar B.verbose = TRUE
    add_data_to_bundle(&B, y, L)

    assert_equal_str(B.name_yseries, "y")
    assert_equal_str(B.name_xlist, "L")
    assert_equal_num(nobs(B.y), 55)
    assert_equal_num(nelem(B.xlist), 3)

    bundle B = null
    scalar B.with_intercept = FALSE
    scalar B.verbose = TRUE
    add_data_to_bundle(&B, y, L)

    assert_equal_str(B.name_yseries, "y")
    assert_equal_str(B.name_xlist, "L")
    assert_equal_num(nobs(B.y), 55)
    assert_equal_num(nelem(B.xlist), 2)
end function
test_add_data_to_bundle(LRM, L)


function void Tinitialize_criteria_values_mat (void)
    print "Start testing initialize_criteria_values_mat()"


    bundle B = defbundle("parameter_matrix", zeros(5, 4))
    matrix m = initialize_criteria_values_mat(B)
    strings clabels = cnameget(m)

    assert_equal_num(rows(m), rows(B.parameter_matrix))
    assert_equal_num(cols(m), 4)

    assert_true(clabels[1] == "aicc")
    assert_true(clabels[2] == "aic")
    assert_true(clabels[3] == "bic")
    assert_true(clabels[4] == "hqc")
end function
Tinitialize_criteria_values_mat()


function void test_rank_models_by_criteria (void)
    print "Start testing rank_models_by_criteria()"

    bundle B = null
    scalar B.n_combinations = 3
    matrix B.parameter_matrix = zeros(3, 3) # cols: p, d, q
    matrix B.criteria_values = { -3, -1, -3, -2; \
                                 -1, -2, -1, -3; \
                                 -2, -3, -2, -1}

    rank_models_by_criteria(&B)
    matrix aicc = B.model_rank_by_criteria[,1]
    matrix aic = B.model_rank_by_criteria[,2]
    matrix bic = B.model_rank_by_criteria[,3]
    matrix hqc = B.model_rank_by_criteria[,4]

    assert_equal_num(aicc[1], 1)
    assert_equal_num(aicc[2], 3)
    assert_equal_num(aicc[3], 2)

    assert_equal_num(aic[1], 3)
    assert_equal_num(aic[2], 2)
    assert_equal_num(aic[3], 1)

    assert_equal_num(bic[1], 1)
    assert_equal_num(bic[2], 3)
    assert_equal_num(bic[3], 2)

    assert_equal_num(hqc[1], 2)
    assert_equal_num(hqc[2], 1)
    assert_equal_num(hqc[3], 3)
end function
test_rank_models_by_criteria()


open nile.gdt -p -q
function void test_get_auto_arima_parameters (void)
    print "Start testing get_auto_arima_parameters()"
    print "Non-seasonal data"

    bundle B = null
    scalar B.n_combinations = 3
    matrix B.parameter_matrix = { 0, 0, 1; \
                                  0, 1, 1; \
                                  2, 1, 3}

    matrix B.model_rank_by_criteria = {1, 3, 1, 2;\
                                       3, 2, 3, 1;\
                                       2, 1, 2, 3}


    matrix m = get_auto_arima_parameters(B, "aicc", 3)
    assert_equal_num(m[1], 0)
    assert_equal_num(m[2], 1)
    assert_equal_num(m[3], 1)

    matrix m = get_auto_arima_parameters(B, "aic", 1)
    assert_equal_num(m[1], 2)
    assert_equal_num(m[2], 1)
    assert_equal_num(m[3], 3)

    matrix m = get_auto_arima_parameters(B, "bic", 3)
    assert_equal_num(m[1], 0)
    assert_equal_num(m[2], 1)
    assert_equal_num(m[3], 1)

    matrix m = get_auto_arima_parameters(B, "hqc", 2)
    assert_equal_num(m[1], 0)
    assert_equal_num(m[2], 0)
    assert_equal_num(m[3], 1)

    # Should fail -- here we should see some error msg.
    catch get_auto_arima_parameters(B, "foo", 2)
    catch get_auto_arima_parameters(B, "aic", 1)
    catch get_auto_arima_parameters(B, "aic", 5)
end function
test_get_auto_arima_parameters()


open denmark.gdt -p -q
function void test_get_auto_arima_params_seas (void)
    print "Start testing get_auto_arima_parameters()"
    print "Seasonal data"

    bundle B = null
    scalar B.n_combinations = 3
    matrix B.parameter_matrix = { 0, 0, 1, 1, 1, 1; \
                                  0, 1, 1, 1, 1, 1; \
                                  2, 1, 3, 1, 1, 1}

    matrix B.model_rank_by_criteria = {1, 3, 1, 2;\
                                       3, 2, 3, 1;\
                                       2, 1, 2, 3}

    matrix m = get_auto_arima_parameters(B, "aicc", 3)
    assert_equal_num(m[1], 0)
    assert_equal_num(m[2], 1)
    assert_equal_num(m[3], 1)
    assert_equal_num(m[4], 1)
    assert_equal_num(m[5], 1)
    assert_equal_num(m[6], 1)

    matrix m = get_auto_arima_parameters(B, "aic", 1)
    assert_equal_num(m[1], 2)
    assert_equal_num(m[2], 1)
    assert_equal_num(m[3], 3)
    assert_equal_num(m[4], 1)
    assert_equal_num(m[5], 1)
    assert_equal_num(m[6], 1)

    matrix m = get_auto_arima_parameters(B, "bic", 3)
    assert_equal_num(m[1], 0)
    assert_equal_num(m[2], 1)
    assert_equal_num(m[3], 1)
    assert_equal_num(m[4], 1)
    assert_equal_num(m[5], 1)
    assert_equal_num(m[6], 1)

    matrix m = get_auto_arima_parameters(B, "hqc", 2)
    assert_equal_num(m[1], 0)
    assert_equal_num(m[2], 0)
    assert_equal_num(m[3], 1)
    assert_equal_num(m[4], 1)
    assert_equal_num(m[5], 1)
    assert_equal_num(m[6], 1)

    # Should fail -- here we should see some error msg.
    catch get_auto_arima_parameters(B, "foo", 2)
    catch get_auto_arima_parameters(B, "aic", 1)
    catch get_auto_arima_parameters(B, "aic", 5)
end function
test_get_auto_arima_params_seas()


open denmark.gdt -p -q
function void test_get_auto_arima_command_sea (void)
    print "Start testing get_auto_arima_command()"
    print "Seasonal data"

    bundle B = null
    string B.name_yseries = "foo_series"
    scalar B.intercept_added = TRUE
    scalar B.with_intercept = TRUE
    string B.name_xlist = "L"
    string B.arima_model_options_string = "--some_options"
    scalar B.n_combinations = 3
    scalar B.error = FALSE
    matrix B.parameter_matrix = { 0, 0, 1, 1, 1, 1; \
                                  0, 1, 1, 1, 1, 1; \
                                  2, 1, 3, 1, 1, 1}

    matrix B.model_rank_by_criteria = {1, 3, 1, 2;\
                                       3, 2, 3, 1;\
                                       2, 1, 2, 3}

    string cmd = get_auto_arima_command(B, "aicc", 2)
    assert_equal_str(cmd, "arima 2 1 3 ; 1 1 1 ; foo_series const L --some_options")

    string cmd = get_auto_arima_command(B, "aic", 1)
    assert_equal_str(cmd, "arima 2 1 3 ; 1 1 1 ; foo_series const L --some_options")

    string cmd = get_auto_arima_command(B, "bic", 2)
    assert_equal_str(cmd, "arima 2 1 3 ; 1 1 1 ; foo_series const L --some_options")
end function
test_get_auto_arima_command_sea()


open nile.gdt -p -q
function void test_get_auto_arima_command (void)
    print "Start testing get_auto_arima_command()"
    print "Non-seasonal data"

    bundle B = null
    scalar B.error = FALSE
    string B.name_yseries = "foo_series"
    scalar B.intercept_added = TRUE
    scalar B.with_intercept = TRUE
    string B.name_xlist = "L"
    string B.arima_model_options_string = "--some_options"
    scalar B.n_combinations = 3
        matrix B.parameter_matrix = { 0, 0, 1; \
                                      0, 1, 1; \
                                      2, 1, 3}

    matrix B.model_rank_by_criteria = {1, 3, 1, 2;\
                                       3, 2, 3, 1;\
                                       2, 1, 2, 3}

    string cmd = get_auto_arima_command(B, "aicc", 2)
    assert_equal_str(cmd, "arima 2 1 3 ; foo_series const L --some_options")

    string cmd = get_auto_arima_command(B, "aic", 1)
    assert_equal_str(cmd, "arima 2 1 3 ; foo_series const L --some_options")

    string cmd = get_auto_arima_command(B, "bic", 2)
    assert_equal_str(cmd, "arima 2 1 3 ; foo_series const L --some_options")
end function
test_get_auto_arima_command()


open nile.gdt -q -p
function void test_row_labels (void)
    print "Start testing row_labels()"
    print "Non-seasonal case."

    bundle B = null
    scalar B.n_combinations = 3
    matrix B.parameter_matrix = { 0, 0, 1; \
                                  0, 1, 1; \
                                  2, 1, 3}

    strings rlabels = row_labels(B)

    assert_equal_str(strstrip(rlabels[1]), "0|0|1")
    assert_equal_str(strstrip(rlabels[2]), "0|1|1")
    assert_equal_str(strstrip(rlabels[3]), "2|1|3")
end function
test_row_labels()

open denmark.gdt -q -p
function void test_row_labels_season (void)
    print "Start testing row_labels()"
    print "Seasonal case."

    bundle B = null
    scalar B.n_combinations = 3
    matrix B.parameter_matrix = { 0, 0, 1, 1, 1, 1; \
                                  0, 1, 1, 1, 1, 1; \
                                  2, 1, 3, 1, 1, 1}

    strings rlabels = row_labels(B)

    assert_equal_str(strstrip(rlabels[1]), "0|0|1 |1|1|1")
    assert_equal_str(strstrip(rlabels[2]), "0|1|1 |1|1|1")
    assert_equal_str(strstrip(rlabels[3]), "2|1|3 |1|1|1")
end function
test_row_labels_season()


function void test_print_table_border (void)
    print "Start testing print_table_border()"

    print_table_border()
end function
test_print_table_border()


function void test_print_summary_intro (void)
    print "Start testing print_summary_intro()"

    bundle B = null
    string B.sample_start = "2020-01-01"
    string B.sample_end = "2020-07-31"

    print_summary_intro(B)
end function
test_print_summary_intro()


function void test_print_table_header (void)
    print "Start testing print_table_header()"

    print_table_header()
end function
test_print_table_header()


function void test_aicc (void)
    print "Start testing aicc()"

    bundle B = null
    scalar B.aic = -10
    scalar B.T = 10
    scalar B.ncoeff = 1

    scalar aicc = aicc(B)
    assert_equal_num(aicc, -9.5)
end function
test_aicc()


/*
function void test_estimation_method_support (void)
    print "Start testing estimation_method_supported()"

    bundle
end function
test_estimation_method_support()
*/


/*
function void test_print_table_and_row_labels (void)
    print "Start testing print_table_and_row_labels()"

    print "pass"
end function
test_print_table_and_row_labels()
*/



printf "\nInfo: All tests passed.\n"
